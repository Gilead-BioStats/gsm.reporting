[{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Step-by-Step Reporting Workflow","text":"vignette walks users mechanics functions workflows produce Reporting output within gsm package. gsm leverages Key Risk Indicators (KRIs) thresholds conduct study-level, country-level site-level Risk Based Monitoring clinical trials. functions workflows produce data frames, visualizations, metadata, reports used reporting error checking clinical sites. image illustrates overarching context reporting workflow runs, taking inputs output analytics workflow, well raw study-, site-, country-level data Raw/Raw+ format.  functions create data frames reporting data model run automatically sequentially user specifies metadata data needed report, calls upon RunWorkflow() function yaml files workflow/3_reporting directory. create report, output reporting yamls fed yamls workflow/4_modules directory produce html document charts tables created reporting workflow. detailed discussion yaml file directory structure, see (vignette(\"gsmExtensions\")). individual functions can also run independently outside specified yaml workflow. purposes documentation, evaluate input(s) output(s) individual function specific KRI show stepwise progression yaml workflow set handle process reporting-level data.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"case-study---step-by-step-full-site-level-report","dir":"Articles","previous_headings":"Introduction","what":"Case Study - Step-by-Step Full Site-Level Report","title":"Step-by-Step Reporting Workflow","text":"use sample clinical data {clindata} package run full site-level report 12 KRIs included package. focus vignette reporting workflow, output analytics workflow briefly discussed, context inputs reporting workflow. Additional supporting functions explored Appendix 1.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-0---run-analysis-workflows","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report","what":"Step 0 - Run Analysis Workflow(s)","title":"Step-by-Step Reporting Workflow","text":"Prior running reporting model create reporting data frames, charts reports, metrics reporting must properly calculated flagged analysis workflow. information Analysis Workflow, see associated vignette(\"DataAnalysis\"). run analysis workflow 13 KRIs using clindata Raw+ data, use code snippet . , three pieces output used reporting workflow: lAnalysis - list data frames analysis data model lWorkflow - list containing metadata KRIs mapped$Mapped_ENROLL - mapped data.frame enrolled participants","code":"# Create Mapped Data - filter/map raw data lSource <- list(     Source_SUBJ = clindata::rawplus_dm,     Source_AE = clindata::rawplus_ae,     Source_PD = clindata::ctms_protdev,     Source_LB = clindata::rawplus_lb,     Source_STUDCOMP = clindata::rawplus_studcomp,     Source_SDRGCOMP = clindata::rawplus_sdrgcomp %>% dplyr::filter(.data$phase == 'Blinded Study Drug Completion'),     Source_DATACHG = clindata::edc_data_points,     Source_DATAENT = clindata::edc_data_pages,     Source_QUERY = clindata::edc_queries,     Source_ENROLL = clindata::rawplus_enroll,     Source_SITE = clindata::ctms_site,     Source_STUDY = clindata::ctms_study )  # Step 0 - Data Ingestion - standardize tables/columns names mappings_wf <- MakeWorkflowList(strPath = \"workflow/1_mappings\", strPackage = \"gsm.mapping\") mappings_spec <- CombineSpecs(mappings_wf) lRaw <- Ingest(lSource, mappings_spec)  # Step 1 - Create Mapped Data Layer - filter, aggregate and join raw data to create mapped data layer mapped <- RunWorkflows(mappings_wf, lRaw)  # Step 2 - Create Metrics - calculate metrics using mapped data metrics_wf <- MakeWorkflowList(strPath = \"workflow/2_metrics\", strNames = \"kri\", strPackage = \"gsm.kri\") lAnalysis <- RunWorkflows(metrics_wf, mapped)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-1---create-reporting-model-data-frames","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report","what":"Step 1 - Create Reporting Model Data Frames","title":"Step-by-Step Reporting Workflow","text":"necessary inputs reporting model created, can move generate reporting data model data frames. data frames created follows: dfGroups: Group-level metadata dictionary. Created passing CTMS site study data MakeLongMeta(). dfMetrics: Metric-specific metadata use charts reporting. Created passing lWorkflow object MakeMetric(). dfResults: stacked summary analysis pipeline output. Created passing list results returned Summarize() BindResults(). dfBounds: Set predicted percentages/rates upper- lower-bounds across full range sample sizes/total exposure values reporting. Created passing dfResults dfMetrics MakeBounds(). details tables, see vignette(\"DataModel\"). following sub-steps dive creation structure tables. Sample data tables can found gsm reportingGroups, reportingMetrics, reportingResults reportingBounds. sample tables used throughout package examples documentation.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-1-1---transform-ctms-data-into-dfgroups-data-frame","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report > Step 1 - Create Reporting Model Data Frames","what":"Step 1.1 - Transform CTMS data into dfGroups data frame","title":"Step-by-Step Reporting Workflow","text":"dfGroups data frame critical providing site-, study- country-level information final report. table based CTMS data mapped dfEnrolled data frame created Analysis workflow. Creating table requires creation 5 smaller tables summarize data group level using RunQuery() MakeLongMeta(). small tables bound together create dfGroups. resulting dfGroups dataframe contains following columns: GroupID: Group Identifier GroupLevel: Type Group specified GroupID (Country, Site, Study) Param: Parameter Name (e.g. “Status”) Value: Parameter Value (e.g. “Active”) detailed explanation Params group level can found vignette(\"DataModel\").","code":"#Transform CTMS Site and Study Level data dfCTMSSite <- RunQuery(df = clindata::ctms_site,                         strQuery = \"SELECT pi_number as GroupID, site_status as Status, pi_first_name as InvestigatorFirstName, pi_last_name as InvestigatorLastName, city as City, state as State, country as Country, * FROM df\") |>   MakeLongMeta(strGroupLevel = 'Site')  dfCTMSStudy <- RunQuery(df = clindata::ctms_study,                          strQuery = \"SELECT protocol_number as GroupID, status as Status, * FROM df\") |>   MakeLongMeta(strGroupLevel = 'Study')  # Get Participant and Site counts for Country, Site and Study dfSiteCounts <- RunQuery(df = mapped$Mapped_ENROLL,                              strQuery = \"SELECT invid as GroupID, COUNT(DISTINCT subjectid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY invid\") |>   MakeLongMeta(strGroupLevel = \"Site\")  dfStudyCounts <- RunQuery(df = mapped$Mapped_ENROLL,                              strQuery = \"SELECT studyid as GroupID, COUNT(DISTINCT subjectid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY studyid\") |>   MakeLongMeta(strGroupLevel = \"Study\")  dfCountryCounts <- RunQuery(df = mapped$Mapped_ENROLL,                              strQuery = \"SELECT country as GroupID, COUNT(DISTINCT subjectid) as ParticipantCount, COUNT(DISTINCT invid) as SiteCount FROM df GROUP BY country\") |>   MakeLongMeta(strGroupLevel = \"Country\")   # Combine CTMS and Counts data as dfGroups dfGroups <- dplyr::bind_rows(SiteCounts = dfSiteCounts,                        StudyCounts = dfStudyCounts,                        CountryCounts = dfCountryCounts,                        Site = dfCTMSSite,                        Study = dfCTMSStudy)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-1-2---create-dfmetrics-metadata","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report > Step 1 - Create Reporting Model Data Frames","what":"Step 1.2 - Create dfMetrics Metadata","title":"Step-by-Step Reporting Workflow","text":"dfMetrics table contains metadata KRIs report. information comes meta section metric workflows, metrics_wf defined Step 0. Using workflow information input, MakeMetric() used produce data frame one row per metric. resulting dfMetrics dataframe contains following columns: File: yaml file workflow MetricID: ID Metric Group: group type metric (e.g. “Site”) Abbreviation: Abbreviation metric Metric: Name metric Numerator: Data source Numerator Denominator: Data source Denominator Model: Model used calculate metric Score: Type Score reported Threshold: Thresholds used bounds flags","code":"dfMetrics <- MakeMetric(lWorkflows = metrics_wf)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-1-3---stack-dfsummary-data-into-dfresults","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report > Step 1 - Create Reporting Model Data Frames","what":"Step 1.3 - Stack dfSummary data into dfResults","title":"Step-by-Step Reporting Workflow","text":"reporting workflow requires metrics stacked single data frame, dfResults. stacked data frame created feeding lAnalysis list analysis workflow BindResults() along snapshot date study id. resulting dfResults data frame contains following columns: GroupID: Group Identifier GroupLevel: Type Group specified GroupID (Country, Site, Study) Numerator: calculated numerator value Denominator: calculated denominator value Metric: calculated rate/metric value Score: calculated metric score Flag: calculated flag MetricID: Metric ID StudyID: Study ID SnapshotDate: Date snapshot","code":"dfResults <- BindResults(lAnalysis = lAnalysis,                          strName = \"Analysis_Summary\",                          dSnapshotDate = Sys.Date(),                          strStudyID = \"ABC-123\")"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-1-4---create-dfbounds-for-confidence-intervals","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report > Step 1 - Create Reporting Model Data Frames","what":"Step 1.4 - Create dfBounds for Confidence Intervals","title":"Step-by-Step Reporting Workflow","text":"Several charts created KRI reports use confidence intervals bounds delineate observations based flag receive (flag, amber red). order create data frame contains information boundaries, dfBounds, dfResults dfMetrics fed MakeBounds() function. MakeBounds() function wrapper around Analyze_*_PredictBounds() functions create bounds based model used estimate metric(Normal Approximation Poisson). resulting dfBounds data frame contains following columns: Threshold: number standard deviations upper lower bounds based Denominator: calculated denominator value LogDenominator: calculated log denominator value Numerator: calculated numerator value Metric: calculated rate/metric value MetricID: Metric ID StudyID: Study ID SnapshotDate: Date snapshot","code":"dfBounds <- MakeBounds(dfResults = dfResults,                         dfMetrics = dfMetrics) #> Creating stacked dfBounds data for strMetrics #> Parsed -2,-1,2,3 to numeric vector: -2, -1, 2, 3 #> nStep was not provided. Setting default step to 203.584. #> Parsed -2,-1,2,3 to numeric vector: -2, -1, 2, 3 #> nStep was not provided. Setting default step to 203.584. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 203.584. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 203.584. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 121.068. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 0.272. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 0.272. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 433.42. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 8.652. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 50.716. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 433.42. #> Parsed -3,-2,2,3 to numeric vector: -3, -2, 2, 3 #> nStep was not provided. Setting default step to 0.596."},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-2---create-visualizations","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report","what":"Step 2 - Create Visualizations","title":"Step-by-Step Reporting Workflow","text":"Now data frames reporting data model created, can create charts display data useful easily interpreted way. four data frames created Step 1 fed MakeCharts() function create relevant charts given input data. MakeCharts() wrapper around several helper functions generate static visualization JS widget individually. Appendix 1 goes detail individual functions. output MakeCharts list containing following charts: - scatterJS: scatter plot using JavaScript. - scatter: scatter plot using ggplot2. - barMetricJS: bar chart using JavaScript metric y-axis. - barScoreJS: bar chart using JavaScript score y-axis. - barMetric: bar chart using ggplot2 metric y-axis. - barScore: bar chart using ggplot2 score y-axis. - timeSeriesContinuousScoreJS: time series chart using JavaScript score y-axis. - timeSeriesContinuousMetricJS: time series chart using JavaScript metric y-axis. - timeSeriesContinuousNumeratorJS: time series chart using JavaScript numerator y-axis. data contains one snapshot data timeseries charts created. static interactive versions scatter plot AE KRI:","code":"lCharts <- MakeCharts(dfResults = dfResults,                       dfGroups = dfGroups,                       dfBounds = dfBounds,                       dfMetrics = dfMetrics) lCharts$Analysis_kri0001$scatter lCharts$Analysis_kri0001$scatterJS #> NULL"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"step-3---generate-report","dir":"Articles","previous_headings":"Introduction > Case Study - Step-by-Step Full Site-Level Report","what":"Step 3 - Generate Report","title":"Step-by-Step Reporting Workflow","text":"components created generate HTML report study working . order generate report save locally, simply feed lCharts, dfResults, dfGroups, dfMetrics (optionally) absolute directory path file report saved (strOutputDir strOutputFile, respectively) Report_KRI() HTML output knit Report_KRI.Rmd template. intermediate files knitting process saved temporary folder. , see screenshot beginning report. charts metrics included throughout analysis reporting workflows included report.","code":"lReport <- Report_KRI(lCharts = lCharts,                       dfResults = dfResults,                       dfGroups = dfGroups,                       dfMetrics = dfMetrics,                       strOutputFile = \"test_kri_report.html\")"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"using-yaml-workflows-to-generate-reports","dir":"Articles","previous_headings":"Introduction","what":"Using YAML Workflows to generate reports","title":"Step-by-Step Reporting Workflow","text":"helpful understand step process works, provided series YAML workflow files make running reports multiple KRIs easy ability automated. , see two options run workflows. first run analytics workflow(s), followed reporting workflow data_reporting.yaml followed charts reports workflow reports.yaml. allows user examine output workflow individually moving next step. second option run snapshot.yaml workflow, takes raw data (including site study data) extra metadata arguments beginning workflow, result list data frames charts models, well report html saved working directory.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"option-1---run-all-workflows-separately","dir":"Articles","previous_headings":"Introduction > Using YAML Workflows to generate reports","what":"Option 1 - Run All Workflows Separately","title":"Step-by-Step Reporting Workflow","text":"","code":"# Step 1 - Create Mapped Data - filter/map raw data # Source Data lSource <- list(     Source_SUBJ = clindata::rawplus_dm,     Source_AE = clindata::rawplus_ae,     Source_PD = clindata::ctms_protdev,     Source_LB = clindata::rawplus_lb,     Source_STUDCOMP = clindata::rawplus_studcomp,     Source_SDRGCOMP = clindata::rawplus_sdrgcomp %>% dplyr::filter(.data$phase == 'Blinded Study Drug Completion'),     Source_DATACHG = clindata::edc_data_points,     Source_DATAENT = clindata::edc_data_pages,     Source_QUERY = clindata::edc_queries,     Source_ENROLL = clindata::rawplus_enroll,     Source_SITE = clindata::ctms_site,     Source_STUDY = clindata::ctms_study )  # Step 0 - Data Ingestion - standardize tables/columns names lRaw <- list(     Raw_SUBJ = lSource$Source_SUBJ,     Raw_AE = lSource$Source_AE,     Raw_PD = lSource$Source_PD %>%       dplyr::rename(subjid = subjectenrollmentnumber),     Raw_LB = lSource$Source_LB,     Raw_STUDCOMP = lSource$Source_STUDCOMP,     Raw_SDRGCOMP = lSource$Source_SDRGCOMP,     Raw_DATACHG = lSource$Source_DATACHG %>%       dplyr::rename(subject_nsv = subjectname),     Raw_DATAENT = lSource$Source_DATAENT %>%       dplyr::rename(subject_nsv = subjectname),     Raw_QUERY = lSource$Source_QUERY %>%       dplyr::rename(subject_nsv = subjectname),     Raw_ENROLL = lSource$Source_ENROLL,     Raw_SITE = lSource$Source_SITE %>%       dplyr::rename(studyid = protocol) %>%       dplyr::rename(invid = pi_number) %>%       dplyr::rename(InvestigatorFirstName = pi_first_name) %>%       dplyr::rename(InvestigatorLastName = pi_last_name) %>%       dplyr::rename(City = city) %>%       dplyr::rename(State = state) %>%       dplyr::rename(Country = country),     Raw_STUDY = lSource$Source_STUDY %>%       dplyr::rename(studyid = protocol_number) %>%       dplyr::rename(Status = status) )  # Step 1 - Create Mapped Data Layer - filter, aggregate and join raw data to create mapped data layer mappings_wf <- MakeWorkflowList(strPath = \"workflow/1_mappings\", strPackage = \"gsm.mapping\") mapped <- RunWorkflows(mappings_wf, lRaw)  # Step 2 - Create Metrics - calculate metrics using mapped data metrics_wf <- MakeWorkflowList(strPath = \"workflow/2_metrics\", strPackage = \"gsm.kri\") analyzed <- RunWorkflows(metrics_wf, mapped)  # Step 3 - Create Reporting Layer - create reports using metrics data reporting_wf <- MakeWorkflowList(strPath = \"workflow/3_reporting\", strPackage = \"gsm.reporting\") reporting <- RunWorkflows(reporting_wf, c(mapped, list(lAnalyzed = analyzed, lWorkflows = metrics_wf)))  # Step 4 - Create KRI Reports - create KRI report using reporting data module_wf <- MakeWorkflowList(strPath = \"workflow/4_modules\", strPackage = \"gsm.kri\") lReports <- RunWorkflows(module_wf, reporting)  #### 3.2 - Automate data ingestion using Ingest() and CombineSpecs() # Step 0 - Data Ingestion - standardize tables/columns names mappings_wf <- MakeWorkflowList(strPath = \"workflow/1_mappings\", strPackage = \"gsm.mapping\") mappings_spec <- CombineSpecs(mappings_wf) lRaw <- Ingest(lSource, mappings_spec)  # Step 1 - Create Mapped Data Layer - filter, aggregate and join raw data to create mapped data layer mapped <- RunWorkflows(mappings_wf, lRaw)  # Step 2 - Create Metrics - calculate metrics using mapped data metrics_wf <- MakeWorkflowList(strPath = \"workflow/2_metrics\", strPackage = \"gsm.kri\") analyzed <- RunWorkflows(metrics_wf, mapped)  # Step 3 - Create Reporting Layer - create reports using metrics data reporting_wf <- MakeWorkflowList(strPath = \"workflow/3_reporting\", strPackage = \"gsm.reporting\") reporting <- RunWorkflows(reporting_wf, c(mapped, list(lAnalyzed = analyzed, lWorkflows = metrics_wf)))  # Step 4 - Create KRI Report - create KRI report using reporting data module_wf <- MakeWorkflowList(strPath = \"workflow/4_modules\", strPackage = \"gsm.kri\") lReports <- RunWorkflows(module_wf, reporting)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"recap---reporting-workflow","dir":"Articles","previous_headings":"Introduction > Using YAML Workflows to generate reports","what":"Recap - Reporting Workflow","title":"Step-by-Step Reporting Workflow","text":"dfGroups created CTMS data using RunQuery(), MakeLongMeta() bind_rows() dfMetrics created lWorkflow using MakeMetric() dfResults created lAnalysis$dfSummary using BindResults() dfBounds created dfResults using MakeBounds() List charts tables (lCharts) created dfResults, dfBounds, dfMetrics dfGroups using MakeCharts() Report generated lCharts, dfResults, dfMetrics dfGroups using Report_KRI()","code":""},{"path":[]},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"mapping-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Mapping Functions","title":"Step-by-Step Reporting Workflow","text":"RunQuery(): Run SQL query create new data.frames filtering column name specifications.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"visualization-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Visualization Functions","title":"Step-by-Step Reporting Workflow","text":"Visualize_Scatter(): Creates scatter plot Total Exposure (days, log scale) vs Total Number Event(s) Interest (linear scale). data point represents one site. Outliers plotted red site label attached. plot created statistical method defined identity. Chart called scatter lCharts object. Visualize_Score(): Provides standard visualization Score KRI. Charts called barScore barMetric lCharts object. Visualize_Metric(): Creates available charts tables metric using data provided.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"widget-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Widget Functions","title":"Step-by-Step Reporting Workflow","text":"Widget_GroupOverview(): Creates interactive table displaying flag distribution groups across metrics. Widget_BarChart(): Creates interactive bar chart visualization Score KRI. Charts called barScoreJS barMetricJS lCharts object. Widget_ScatterPlot(): Creates interactive scatter plot Total Exposure (days, log scale) vs Total Number Event(s) Interest (linear scale). data point represents one site. Outliers plotted red site label attached.Chart called scatterJS lCharts object. Widget_TimeSeries(): Creates interactive time series scatter plot score, metric numerator. Charts called timeSeriesContinuousScoreJS, timeSeriesContinuousMetricJS, timeSeriesContinuousNumeratorJS lCharts object.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/articles/DataReporting.html","id":"table-functions","dir":"Articles","previous_headings":"Appendix 1 - Supporting Functions","what":"Table Functions","title":"Step-by-Step Reporting Workflow","text":"Report_MetricTable(): Creates sortable table displaying flags per group (e.g. Site, Country) one metric time.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeremy Wildfire. Author, maintainer. Laura Maxwell. Author.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wildfire J, Maxwell L (2025). gsm.reporting: Package (One Line, Title Case). R package version 0.0.1.","code":"@Manual{,   title = {gsm.reporting: What the Package Does (One Line, Title Case)},   author = {Jeremy Wildfire and Laura Maxwell},   year = {2025},   note = {R package version 0.0.1}, }"},{"path":"https://gilead-biostats.github.io/gsm.reporting/index.html","id":"gsmreporting","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"{gsm} ecosystem provides standardized Risk Based Quality Monitoring (RBQM) framework clinical trials pairs flexible data pipeline robust reports like one shown .  {gsm.reporting} package provides necessary functions workflows produce reporting data model used many packages produce visualizations reports. README provides high-level overview {gsm.reporting}; see gsm Reporting Vignette additional details. necessary inputs reporting model created via functions gsm.mapping {gsm.core}, {gsm.reporting} generates reporting data model data frames. data frames created follows: dfGroups: Group-level metadata dictionary. Created passing CTMS site study data MakeLongMeta(). dfMetrics: Metric-specific metadata use charts reporting. Created passing lWorkflow object MakeMetric(). dfResults: stacked summary analysis pipeline output. Created passing list results returned Summarize() BindResults(). dfBounds: Set predicted percentages/rates upper- lower-bounds across full range sample sizes/total exposure values reporting. Created passing dfResults dfMetrics MakeBounds().","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version gsm.reporting like :","code":"# install.packages(\"pak\") pak::pak(\"Gilead-BioStats/gsm.reporting@dev\")"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/BindResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to bind results from multiple workflows — BindResults","title":"Helper function to bind results from multiple workflows — BindResults","text":"Used stack results (e.g. dfSummary) list analysis pipeline output formatted like result RunWorkflows(). Also adds study level metadata provided.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/BindResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to bind results from multiple workflows — BindResults","text":"","code":"BindResults(   lAnalysis,   strName,   dSnapshotDate = Sys.Date(),   strStudyID = NULL,   bUselData = FALSE )"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/BindResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to bind results from multiple workflows — BindResults","text":"lAnalysis Named List analysis results format returned RunWorkflows(). strName Name object stack. Pulled lAnalysis (lAnalysis$lData bUselData TRUE). dSnapshotDate Date snapshot. Default Sys.Date(). strStudyID Study ID. bUselData function bind results lData object (look directly root elements lAnalysis)? Default FALSE.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/BindResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to bind results from multiple workflows — BindResults","text":"data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Bounds for display in scatterplots — MakeBounds","title":"Calculate Bounds for display in scatterplots — MakeBounds","text":"Calculate bounds across set metrics.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Bounds for display in scatterplots — MakeBounds","text":"","code":"MakeBounds(   dfResults,   dfMetrics,   strMetrics = unique(dfResults$MetricID),   dSnapshotDate = unique(dfResults$SnapshotDate),   strStudyID = unique(dfResults$StudyID) )"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Bounds for display in scatterplots — MakeBounds","text":"dfResults data.frame stacked summary analysis pipeline output. Created passing list results returned Summarize() BindResults(). Expected columns: GroupID, GroupLevel, Numerator, Denominator, Metric, Score, Flag, MetricID, StudyID, SnapshotDate. dfMetrics data.frame Metric-specific metadata use charts reporting. Created passing lWorkflow object MakeMetric(). Expected columns: File, MetricID, Group, Abbreviation, Metric, Numerator, Denominator, Model, Score, Threshold. details see Data Model vignette: vignette(\"DataModel\", package = \"gsm\"). strMetrics Character vector MetricIDs include dfBounds. unique values dfResults$MetricID used default. dSnapshotDate Snapshot date. Uses dfResults$SnapshotDate default. one snapshot date found dfResults, warning thrown function returns NULL. strStudyID Study ID. Uses dfResults$StudyID default. one snapshot date found dfResults, warning thrown function returns NULL.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Bounds for display in scatterplots — MakeBounds","text":"data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Bounds for display in scatterplots — MakeBounds","text":"","code":"library(gsm) dfBounds <- MakeBounds(   dfResults = reportingResults,   dfMetrics = reportingMetrics ) #> Creating stacked dfBounds data for strMetrics #> Warning: More than one `dSnapshotDate` found. Returning NULL"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse metadata from workflows to a data frame — MakeMetric","title":"Parse metadata from workflows to a data frame — MakeMetric","text":"Used format metric metadata (dfMetrics) use charts reports. function takes list workflows returns data frame one row per MetricID.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse metadata from workflows to a data frame — MakeMetric","text":"","code":"MakeMetric(lWorkflows)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse metadata from workflows to a data frame — MakeMetric","text":"lWorkflows list workflows, like one returned gsm::MakeWorkflowList().","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse metadata from workflows to a data frame — MakeMetric","text":"data frame.","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/MakeMetric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse metadata from workflows to a data frame — MakeMetric","text":"","code":"library(gsm) lWorkflows <- MakeWorkflowList(strPath = \"workflow/2_metrics\", strNames = \"kri\", strPackage = \"gsm.kri\") dfMetrics <- MakeMetric(lWorkflows)"},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/gsm.reporting-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gsm.reporting: What the Package Does (One Line, Title Case) — gsm.reporting-package","title":"gsm.reporting: What the Package Does (One Line, Title Case) — gsm.reporting-package","text":"package (one paragraph).","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/reference/gsm.reporting-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gsm.reporting: What the Package Does (One Line, Title Case) — gsm.reporting-package","text":"Maintainer: Jeremy Wildfire jwildfire@gmail.com Authors: Laura Maxwell laura.maxwell@atorusresearch.com","code":""},{"path":"https://gilead-biostats.github.io/gsm.reporting/news/index.html","id":"gsmreporting-v001","dir":"Changelog","previous_headings":"","what":"gsm.reporting v0.0.1","title":"gsm.reporting v0.0.1","text":"initial release migrates reporting data model functions, workflows documentation gsm {gsm.reporting}.","code":""}]
